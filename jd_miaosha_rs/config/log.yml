# Scan this file for changes every 30 seconds
refresh_rate: 30 seconds

appenders:
  # An appender named "stdout" that writes to stdout
  stdout:
    kind: console
    encoder:
      pattern: "{d} {l} {t}:{L} {m}{n}"

  # An appender named "requests" that writes to a file with a custom pattern encoder
  requests:
    kind: rolling_file
    path: "$ENV{HOME}/log/jd_miaosha.log"
    # Specifies if the appender should append to or truncate the log file if it
    # already exists. Defaults to `true`.
    # * `P`, `pid` - The current process id.
    # * `I`, `thread_id` - The ID of the current thread.
    # * `l`, `level` - The log level.
    # * `L`, `line` - The line that the log message came from, or `???` if not provided.
    append: true
    encoder:
      pattern: "{d} - [{P}-{I}-{L}]-{l}-{M}:{m}{n}"

      # The policy which handles rotation of the log file. Required.
    policy:
      # Identifies which policy is to be used. If no kind is specified, it will
      # default to "compound".
      kind: compound
      # The remainder of the configuration is passed along to the policy's
      # deserializer, and will vary based on the kind of policy.
      trigger:
        kind: size
        limit: 20 mb

      roller:
        kind: fixed_window
        pattern: 'archive/jd_miaosha.{}.log'
        base: 0
        count: 3

# Set the default logging level to "warn" and attach the "stdout" appender to the root
root:
  level: info
  appenders:
    - stdout
    - requests

loggers:
  # Raise the maximum log level for events sent to the "app::backend::db" logger to "info"
  iced_wgpu::image:
    level: error
  gfx_backend_metal:
    level: error
  naga:
    level: error
#
#  # Route log events sent to the "app::requests" logger to the "requests" appender,
#  # and *not* the normal appenders installed at the root
#  app::requests:
#    level: info
#    appenders:
#      - requests
#    additive: false